%%
%%   This file contains the settings for the project
%%   You should make a copy of tracerays_settings.m.template as tracerays_settings.m and make your changes there
%%
%'forward'
%'backward'
direction = 'backward';
sync = false;

switch direction
    case 'forward'
        useParfor = false; %must make vis_prop = 0 if useParfor = true
        strength = 50; %strength of the diffuser
        diff_upsample = 0; %upsample the diffuser file
        vis = 0;
        vis_prop = 0;
        save_prop = 0;
        vis_sensor = 0;
        
        zmax = 1000; %range for propagation movie
        zstep = 10; %step size for propagation movie
        
        %Setup tracing grid
        M = 3; %number of Y points, use 1 for 1d case
        N = 3; % number of X points
        P = 2; %number of phi points (angle in y-direction), use 1 for 1d
        Q = 2; %number of theta points (angle in x-direction)
        
        nrays = 138; %number of rays per box in the tracing grid
        x_range = 10; %how far along x to go in same units as pixels (microns), divided into N steps
        y_range = 10; %divided into M steps, use 0 for 1d
        
        %Setup sensor parameters for a sensor that is the same size as the diffuser
        npx =100; %number of pixels in the x-direction on diffuser
        npy = 100; %number of pixels in the y-direction on diffuser, for 1d use 1
        z0 = 100; %propagation distance from diffuser to sensor
        ph_range = .2; %angle range in degrees, divided into P steps
        th_range = .2; %divided into Q steps
        indexEnv = 1; %index of refraction of environment
        indexDiff = 1.5; %index of refraction of diffuser
        
        if sync
            %pixelSize is the same in both x- and y-directions
            pixelSize = x_range ./ npx;
            sensorSizeX = npx;
            sensorSizeY = npy;
            
            %use 2.5 for diffuser strength 50
            thetaSpread = th_range + 2.5;
            phiSpread = ph_range + 2.5;
            rays = nrays * (M*N*P*Q);
            z = z0;
            z2 = 0; %for forward, assuming rays are coming from diffuser
            
            %always uses efficient histogram when synced
            useSimple = false;
            useEfficient = true;
            diff_upsample = false;
            
            strengthB = -strength;
            %backward uses same indexes as forward
            
            xRange = [0 x_range];
            gridX = N;
            
            yRange = [0 y_range];
            gridY = M;
            
            tRange = [(th_range ./ 2) (-th_range ./ 2)];
            gridT = Q;
            
            pRange = [(ph_range ./ 2) (-ph_range ./ 2)];
            gridP = P;
        end
    case 'backward'
        pixelSize = 1; %pixel size in physical units (microns)
        sensorSizeX = 3; %given in pixels
        sensorSizeY = 3; %set to 0 for 2D
        thetaSpread = 2.7; %total spread, in degrees
        phiSpread = 0; %set to 0 for 2D
        rays = 1000; %number of rays on whole sensor
        z = 100; %distance from sensor to diffuser
        z2 = 50; %distance from diffuser to light source
        %if syncing with forward, z2 should be 0
        
        %if both useSimple and useEfficient true, checks if the histograms
        %generated from both functions are equal
        useSimple = true; %use gathererSimple.m
        useEfficient = true;  %use gathererEfficient.m
        diff_upsample = false; %upsample the diffuser file
        
        strengthB = -50; %diffuser strength
        indexEnv = 1;  %index of refraction of environment
        indexDiff = 1.5; %index of refraction of diffuser
        
        xRange = [0 2]; %range for gridding on diffuser in x dimension (left is included, right is not)
        gridX = 5; %number of bins in x dimension
        
        yRange = [0 2];
        gridY = 5;
        
        tRange = [-90 90];
        gridT = 10;
        
        pRange = [-90 90];
        gridP = 10;
        
        if sync
            useParfor = true; %not doing any visualization, so use parfor when synced
            strength = -strengthB;
            diff_upsample = 0;
            vis = 0;
            vis_prop = 0;
            save_prop = 0;
            vis_sensor = 0;
            zmax = 1000;
            zstep = 10;
            
            M = gridY;
            N = gridX;
            P = gridP;
            Q = gridT;
            nrays = round(rays ./ (N*M*P*Q));
            
            x_range = pixelSize * sensorSizeX;
            y_range = pixelSize * sensorSizeY;
            
            npx = sensorSizeX;
            npy = sensorSizeY;
            z0 = z;
            ph_range = max(pRange) - min(pRange);
            th_range = max(tRange) - min(tRange);
            %forward uses same indexes of backward
        end
end
